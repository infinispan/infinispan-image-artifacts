<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:12.1 https://infinispan.org/schemas/infinispan-config-12.1.xsd
                            urn:infinispan:server:12.1 https://infinispan.org/schemas/infinispan-server-12.1.xsd
                            urn:infinispan:config:clustered-locks:12.1 https://infinispan.org/schemas/infinispan-clustered-locks-config-12.1.xsd
                            urn:org:jgroups http://www.jgroups.org/schema/jgroups-4.2.xsd
                            urn:infinispan:config:cloudevents:12.1 https://infinispan.org/schemas/infinispan-cloudevents-config-12.1.xsd"
        xmlns="urn:infinispan:config:12.1"
        xmlns:server="urn:infinispan:server:12.1"
        xmlns:locks="urn:infinispan:config:clustered-locks:12.1"
        xmlns:ce="urn:infinispan:config:cloudevents:12.1">

    <jgroups>
        <stack name="image-tcp" extends="tcp">
            <TCP bind_addr="$\{jgroups.bind.address,jgroups.tcp.address:{jgroups.bindAddress}\}"
                 bind_port="$\{jgroups.bind.port,jgroups.tcp.port:{jgroups.bindPort}\}"
                 enable_diagnostics="{jgroups.diagnostics}"
                 port_range="0"
            />

            {#if jgroups.dnsPing.query}
            <dns.DNS_PING dns_address="{jgroups.dnsPing.address}" dns_query="{jgroups.dnsPing.query}"
                          dns_record_type="{jgroups.dnsPing.recordType}"
                          stack.combine="REPLACE" stack.position="MPING"/>
            {#else}
            <MPING bind_addr="$\{jgroups.bind.address,jgroups.tcp.address:{jgroups.bindAddress}\}"/>
            {/if}
            {#include jgroups-encrypt/}
        </stack>

        <stack name="image-udp" extends="udp">
            <UDP enable_diagnostics="{jgroups.diagnostics}"
                 port_range="0"
            />

            {#if jgroups.dnsPing.query}
            <dns.DNS_PING dns_address="{jgroups.dnsPing.address}" dns_query="{jgroups.dnsPing.query}"
                          dns_record_type="{jgroups.dnsPing.recordType}"
                          stack.combine="REPLACE" stack.position="PING"/>
            {/if}
            {#include jgroups-encrypt/}
            <FD_SOCK client_bind_port="57600" start_port="57600"/>
        </stack>

        {#if xsite.backups}
        <stack-file name="relay-global" path="jgroups-relay.xml"/>

        <stack name="xsite" extends="image-{jgroups.transport}">
            <relay.RELAY2 xmlns="urn:org:jgroups" site="{xsite.name}" max_site_masters="{xsite.maxSiteMasters}"
                          can_become_site_master="{xsite.masterCandidate}"/>
            <remote-sites default-stack="relay-global">
                <remote-site name="{xsite.name}"/>
                {#each xsite.backups}
                <remote-site name="{it.name}"/>
                {/each}
            </remote-sites>
        </stack>
        {/if}
    </jgroups>

    <cache-container name="default" statistics="true" zero-capacity-node="{infinispan.zeroCapacityNode}">
        {#if infinispan.authorization.enabled}
        <security>
            <authorization>
                {#if infinispan.authorization.roleMapper eq 'commonName'}
                <common-name-role-mapper />
                {#else}
                <cluster-role-mapper />
                {/if}
                {#if infinispan.authorization.roles}
                {#for role in infinispan.authorization.roles}
                <role name="{role.name}" permissions="{role.permissions.listAsString}"/>
                {/for}
                {/if}
            </authorization>
        </security>
        {/if}
        <transport cluster="$\{infinispan.cluster.name:{infinispan.clusterName}\}" node-name="$\{infinispan.node.name:\}"
        {#if xsite.backups}stack="xsite"{#else}stack="image-{jgroups.transport}"{/if}/>
        {#if cloudEvents}
            <ce:cloudevents bootstrap-servers="{cloudEvents.bootstrapServers}" {#if cloudEvents.acks} acks="{cloudEvents.acks}" {/if} {#if cloudEvents.cacheEntriesTopic} cache-entries-topic="{cloudEvents.cacheEntriesTopic}" {/if}/>
        {/if}
        <locks:clustered-locks num-owners="{infinispan.locks.owners}" reliability="{infinispan.locks.reliability.upperCase}"/>
    </cache-container>

    <server xmlns="urn:infinispan:server:12.1">
        <interfaces>
            <interface name="public">
                <inet-address value="$\{infinispan.bind.address:{jgroups.bindAddress}\}"/>
            </interface>
        </interfaces>

        <socket-bindings default-interface="public" port-offset="$\{infinispan.socket.binding.port-offset:0\}">
            <socket-binding name="default" port="$\{infinispan.bind.port:11222\}"/>
            {#if endpoints.memcached.enabled}
            <socket-binding name="memcached" port="11221"/>
            {/if}
            {#if endpoints.dedicatedAdmin}
            <socket-binding name="admin" port="11223"/>
            {/if}
        </socket-bindings>

        <security>
            <security-realms>
                <security-realm name="default">
                    <server-identities>
                        <ssl>
                            {#if keystore and keystore.path}
                            <keystore path="{keystore.path}" alias="{keystore.alias}"
                                      keystore-password="{keystore.password}"
                                      {#if keystore.selfSignCert}generate-self-signed-certificate-host="localhost"{/if}/>
                            {/if}
                            {#if truststore and truststore.path}
                            <truststore path="{truststore.path}"  password="{truststore.password}"/>
                            {/if}
                        </ssl>
                    </server-identities>
                    {#if endpoints.auth}

                    {#if endpoints.clientCert.lowerCase eq 'authenticate'}
                    <truststore-realm/>
                    {#else if endpoints.clientCert.lowerCase eq 'none'}
                    <properties-realm groups-attribute="Roles">
                        <user-properties path="users.properties" relative-to="infinispan.server.config.path"
                                         plain-text="true"/>
                        <group-properties path="groups.properties" relative-to="infinispan.server.config.path"/>
                    </properties-realm>
                    {/if}
                    {/if}
                </security-realm>
                {#if endpoints.dedicatedAdmin}
                <security-realm name="admin">
                    <properties-realm groups-attribute="Roles">
                        <user-properties path="admin/users.properties" relative-to="infinispan.server.config.path"
                                         plain-text="true"/>
                        <group-properties path="admin/groups.properties" relative-to="infinispan.server.config.path"/>
                    </properties-realm>
                </security-realm>
                {/if}
            </security-realms>
        </security>

        <endpoints socket-binding="default" security-realm="default" {#if endpoints.clientCert != "none"}require-ssl-client-auth="true"{/if}>
            {#if endpoints.hotrod.enabled}
            {#if endpoints.auth}
            <hotrod-connector>
                <authentication>
                    <sasl qop="{endpoints.hotrod.qop}" server-name="{endpoints.hotrod.serverName}"/>
                </authentication>
            </hotrod-connector>
            {#else}
            <hotrod-connector />
            {/if}
            {/if}

            {#if endpoints.rest.enabled}
                {#if endpoints.rest.cors}
                <rest-connector>
                <cors-rules>
                    {#for rule in endpoints.rest.cors}
                    <cors-rule name="{rule.name}" allow-credentials="{rule.allowCredentials or 'false'}"
                               max-age-seconds="{rule.maxAgeSeconds or 0}">
                        {rule.allowedOrigins.listElement('allowed-origins') or ''}
                        {rule.allowedMethods.listElement('allowed-methods') or ''}
                        {rule.allowedHeaders.listElement('allowed-headers') or ''}
                        {rule.exposeHeaders.listElement('expose-headers') or ''}
                    </cors-rule>
                    {/for}
                </cors-rules>
                </rest-connector>
                {#else}
                <rest-connector />
                {/if}
            {/if}

            {#if endpoints.memcached.enabled}
            <memcached-connector socket-binding="memcached"/>
            {/if}
        </endpoints>

        {#if endpoints.dedicatedAdmin}
        <endpoints socket-binding="admin" security-realm="admin">
            <rest-connector>
                <authentication mechanisms="BASIC DIGEST"/>
            </rest-connector>
        </endpoints>
        {/if}
    </server>
</infinispan>
